# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dat_csv.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import logging

from PyQt5 import QtCore, QtWidgets

from constant.TestCaseType import TestCaseType
from tools.common.dat_csv_common import dat_csv_conversion
from tools.conversion.brake_override_accelerator_parser import brake_override_accelerator
from tools.conversion.main_brake_plausibility_check_parser import main_brake_plausibility_check
from tools.conversion.redundant_brake_plausibility_check_parser import redundant_brake_plausibility_check

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("test_report")
        Dialog.resize(1120, 808)
        Dialog.setWindowTitle("测试报告")

        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 100, 151, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(880, 100, 171, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(440, 100, 181, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(30, 160, 1021, 331))
        self.textBrowser.setObjectName("textBrowser")
        # self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        # self.pushButton_6.setGeometry(QtCore.QRect(880, 510, 171, 41))
        # self.pushButton_6.setObjectName("pushButton_6")

        self.retranslateUi(Dialog)
        # 绑定事件
        self.bindEvents(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("test_report", "测试报告"))
        self.pushButton_3.setText(_translate("Dialog", "选择dat文件目录"))
        self.pushButton_4.setText(_translate("Dialog", "生成报告"))
        self.pushButton_5.setText(_translate("Dialog", "选择输出目录"))
        self.textBrowser.setHtml(_translate("Dialog",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        # self.pushButton_6.setText(_translate("Dialog", "生成报告"))

    def bindEvents(self, Dialog):
        self.pushButton_3.clicked.connect(self.pushButton_3_click)
        self.pushButton_4.clicked.connect(self.pushButton_4_click)
        self.pushButton_5.clicked.connect(self.pushButton_5_click)
        # self.pushButton_6.clicked.connect(self.pushButton_6_click)

    # 选择dat文件目录
    def pushButton_3_click(self):
        global path_
        m = QtWidgets.QFileDialog.getExistingDirectory(None, "dat文件目录",
                                                       "C:\\Users\\Administrator\\Downloads\\RE__ECU_MST_Auto-test_report_follow_up\\MST_L1\\L1")
        path_ = m
        self.textBrowser.append("dat文件目录:" + path_)
        # self.textBrowser.append("请选择存储路径或者点击转化将存储在源地址")
        QtWidgets.QApplication.processEvents()

    # 生成报告
    def pushButton_4_click(self):
        csvPathList = []
        logging.info("\r\n开始转换...")
        dat_files = [f for f in os.listdir(path_) if f.endswith('.dat')]
        for dat_file in dat_files:
            errMsg = dat_csv_conversion(dat_file, path_, outputPath_,'IOTest')
            if errMsg.startswith("err:"):
                self.textBrowser.append(f'文件{dat_file}解析异常:{errMsg}')
            else:
                csvPathList.append(errMsg)
                logging.info(f"转换完成:{errMsg}")

        self.textBrowser.append(f"\r\n{dat_file} 报告生成...")
        if csvPathList:
            # 如果csvPathList不为空，则遍历它
            for csvPath in csvPathList:
                csv_file_name: str = os.path.basename(csvPath)

                if TestCaseType.brake_override_accelerator.value in csv_file_name.lower():
                    # 1.Brake_Override_Accelerator
                    doc_output_path = brake_override_accelerator(csvPath, TestCaseType.brake_override_accelerator.name)
                    self.textBrowser.append(f"已生成: {doc_output_path}\r\n")

                elif TestCaseType.main_brake_plausibility_check.value in csv_file_name.lower():
                    # 2Main Brake Plausibility Check (DIO)
                    doc_output_path = main_brake_plausibility_check(csvPath,
                                                                    TestCaseType.main_brake_plausibility_check.name)
                    self.textBrowser.append(f"已生成: {doc_output_path}\r\n")

                elif TestCaseType.redundant_brake_plausibility_check.value in csv_file_name.lower():
                    # 3Redundant Brake Plausibility Check (DIO)
                    doc_output_path = redundant_brake_plausibility_check(csvPath,
                                                                         TestCaseType.redundant_brake_plausibility_check.name)
                    self.textBrowser.append(f"已生成: {doc_output_path}\r\n")
                else:
                    pass

    # 选择输出目录
    def pushButton_5_click(self):
        global outputPath_
        m = QtWidgets.QFileDialog.getExistingDirectory(None, "选择文件夹",
                                                       "C:\\Users\\Administrator\\Downloads\\RE__ECU_MST_Auto-test_report_follow_up\\MST_L1\\output")
        outputPath_ = m
        self.textBrowser.append(f"输出目录:{outputPath_}")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
